import sys
sys.path.append("C:\\Users\\mmman\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\ChatTelebot")



import telebot
from telebot import types 
import logging
from config import TOKEN_BOT
from telebot.types import InlineKeyboardButton,InlineKeyboardMarkup

from datasystem.database import *

logging.basicConfig(filename='C:\\Users\\mmman\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\ChatTelebot\\signals\\bot.log', level=logging.INFO)

bot = telebot.TeleBot(TOKEN_BOT)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if not user_exists(user_id):
        markup = create_gender_keyboard()
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ª—é–¥—å–º–∏.')
        bot.send_message(message.chat.id, 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 1 –∏–∑ 3\n\n–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ, –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.',reply_markup=create_main_keyboard())


def create_gender_keyboard():
    keyboard = InlineKeyboardMarkup()
    male_button = InlineKeyboardButton('–ú—É–∂—Å–∫–æ–π', callback_data='gender_male_create')
    female_button = InlineKeyboardButton('–ñ–µ–Ω—Å–∫–∏–π', callback_data='gender_female_create')
    # Add other buttons or customization for creating a new gender
    keyboard.add(male_button, female_button)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith('gender_'))
def handle_gender_selection(call):
    user_id = call.from_user.id
    gender = call.data.split('_')[1]

    # Save gender to the database
    save_user_gender(user_id, gender)

    bot.send_message(call.message.chat.id, 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 2 –∏–∑ 3\n\n–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?', reply_markup=create_interests_keyboard())


def create_interests_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    chat_button = types.InlineKeyboardButton('–û–±—â–µ–Ω–∏–µ', callback_data='interest_chat')
    intimate_button = types.InlineKeyboardButton('–ò–Ω—Ç–∏–º 18+', callback_data='interest_intimate')
    keyboard.add(chat_button, intimate_button)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith('interest_'))
def handle_interest_selection(call):
    user_id = call.from_user.id
    interest = call.data.split('_')[1]
    # Save interest to the database
    save_user_interest(user_id, interest)
    bot.send_message(call.message.chat.id, 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 3 –∏–∑ 3\n\n–ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–æ—Ç 10 –¥–æ 99)')


@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_age(message):
    user_id = message.from_user.id
    age = int(message.text)
    # Save age to the database
    markup = create_main_keyboard()
    save_user_age(user_id, age)
    bot.send_message(message.chat.id, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.', reply_markup=markup)


def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    profile_button = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    find_partner_button = types.KeyboardButton('–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé')
    keyboard.add(profile_button, find_partner_button)
    return keyboard


@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = create_main_keyboard()
    bot.send_message(message.chat.id, '‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def handle_profile(message):
    user_id = message.from_user.id
    profile_data = get_user_profile(user_id)
    if profile_data:
        profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n#Ô∏è‚É£ ID ‚Äî {user_id}\nüë´ –ü–æ–ª ‚Äî {profile_data['gender']}\nüîû –í–æ–∑—Ä–∞—Å—Ç ‚Äî {profile_data['age']}\nüö™ –ö–æ–º–Ω–∞—Ç–∞ - {profile_data['interest']}"
        bot.send_message(message.chat.id, profile_text, reply_markup=create_profile_keyboard())
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')

def create_profile_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    change_age_button = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='change_age')
    keyboard.add(change_age_button)
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith('change_'))
def handle_change_profile(call):
    user_id = call.from_user.id
    action = call.data.split('_')[1]
    if action == 'age':
        bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:')
        bot.register_next_step_handler(call.message, process_new_age)

def process_new_age(message):
    user_id = message.from_user.id
    new_age = int(message.text)
    # Update the age in the database
    update_user_age(user_id, new_age)
    bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.')


@bot.message_handler(commands=['stop'])
def stop(message):
    user_id = message.chat.id
    chat_info = get_active_chat(user_id)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    item2 = types.KeyboardButton('–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé')
    markup.add(item1, item2)

    if chat_info:
        # User is in an active chat
        delete_chat(chat_info[0])  # Delete the chat information, not the user
        bot.send_message(chat_info[1], '‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç', reply_markup=markup)
    else:
        # User is not in an active chat
        bot.send_message(user_id, '‚ùå –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —á–∞—Ç', reply_markup=markup) 

@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé':
            handle_find_partner(message)
        elif message.text == '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
            handle_stop_search(message)
        else:
            handle_chat_message(message)


searching_users = []

def handle_find_partner(message):
    global searching_users
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')
    markup.add(item1)

    # Add the user to the end of the queue
    searching_users.append(message.from_user.id)

    # Helper function to send message when there's only one user in the queue
    def send_waiting_message():
        if len(searching_users) == 1:
            bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...', reply_markup=markup)

    # Check if there are at least two users in the queue
    if len(searching_users) >= 2:
        # Pair the first two users in the queue
        chat_two = searching_users.pop(0)
        chat_one = searching_users.pop(0)

        # Create the chat
        if create_chat(chat_one, chat_two):
            mess = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /stop'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('/stop')
            markup.add(item1)

            # Inform both users about the pairing
            bot.send_message(chat_one, mess, reply_markup=markup)
            bot.send_message(chat_two, mess, reply_markup=markup)
        else:
            # If chat creation fails, inform the users and re-add them to the queue
            bot.send_message(chat_one, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            bot.send_message(chat_two, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            searching_users.append(chat_one)
            searching_users.append(chat_two)
    else:
        send_waiting_message()  # Call the helper function when there's only one user in the queue




def handle_user_profile(user_id):
    user_profile = get_user_profile(user_id)
    
    if user_profile is not None:
        gender = user_profile['gender']
        age = user_profile['age']
        interest = user_profile['interest']
    else:
        # Set default values if user profile not found
        gender = 'üôé‚Äç‚ôÇ–ü–∞—Ä–µ–Ω—å'
        age = 25
        interest = '–û–±—â–µ–Ω–∏–µ'

    add_user(user_id, gender, age, interest)

def handle_stop_search(message):
    global searching_users
    
    # Remove the user from the list of searching users
    if message.from_user.id in searching_users:
        searching_users.remove(message.from_user.id)
    bot.send_message(message.chat.id, '‚ùå –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /menu')

def handle_chat_message(message):
    chat_info = get_active_chat(message.chat.id)
    bot.send_message(chat_info[1], message.text)

print("==========================================")
print('                                         ')
print('Telegram bot is working without any errors')
print('                                         ')
print("==========================================")


if __name__ == "__main__":
    logging.info("Bot is starting.")
    bot.polling()