import sys

sys.path.append("C:\\Users\\mmman\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\ChatTelebot")


import telebot
from telebot import types
import logging
from config import TOKEN_BOT, help_of_bot, rules_of_bot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import time

from datasystem.database import *

logging.basicConfig(
    filename="C:\\Users\\mmman\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\ChatTelebot\\signals\\bot.log",
    level=logging.INFO,
)

bot = telebot.TeleBot(TOKEN_BOT)

CHANNEL_ID = -1002044984398


def user_subscribed_channel(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print("Error checking channel subscription:", e)
        return False


@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    if not user_exists(user_id):
        markup = create_gender_keyboard()
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä—É–≥ –æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ª—é–¥—å–º–∏.",
        )

        bot.send_message(
            message.chat.id,
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 1 –∏–∑ 3\n\n–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ, –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?",
            reply_markup=markup,
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚úÖ–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.",
            reply_markup=create_main_keyboard(),
        )


@bot.message_handler(commands=["search"])
def handle_search_command(message):
    handle_find_partner(message)


@bot.message_handler(commands=["rules"])
def rules(message):
    user_id = message.from_user.id
    if user_exists(user_id):

        if not user_subscribed_channel(user_id):
            markup = types.InlineKeyboardMarkup(
                row_width=1
            )  # Set row_width to 1 for a vertical layout
            subscribe_button = types.InlineKeyboardButton(
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/chatroulletebotuz"
            )
            continue_button = types.InlineKeyboardButton(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_registration"
            )
            markup.add(subscribe_button, continue_button)
            bot.send_message(
                message.chat.id,
                'üòî –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
                reply_markup=markup,
            )
            return
        else:
            bot.send_message(
                message.chat.id, rules_of_bot, reply_markup=create_main_keyboard()
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


@bot.message_handler(commands=["help"])
def help(message):
    user_id = message.from_user.id
    if user_exists(user_id):
        if not user_subscribed_channel(user_id):
            markup = types.InlineKeyboardMarkup(
                row_width=1
            )  # Set row_width to 1 for a vertical layout
            subscribe_button = types.InlineKeyboardButton(
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/chatroulletebotuz"
            )
            continue_button = types.InlineKeyboardButton(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_registration"
            )
            markup.add(subscribe_button, continue_button)
            bot.send_message(
                message.chat.id,
                'üòî –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
                reply_markup=markup,
            )
            return
        else:
            bot.send_message(
                message.chat.id, help_of_bot, reply_markup=create_main_keyboard()
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


def create_gender_keyboard():
    keyboard = InlineKeyboardMarkup()
    male_button = InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male_create")
    female_button = InlineKeyboardButton(
        "üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female_create"
    )
    # Add other buttons or customization for creating a new gender
    keyboard.add(male_button, female_button)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith("gender_"))
def handle_gender_selection(call):
    user_id = call.from_user.id
    gender = call.data.split("_")[1]
    if not user_exists(user_id):
        save_user_gender(user_id, gender)
        bot.delete_message(
            call.message.chat.id, call.message.message_id
        )  # Delete the message after button press
        bot.send_message(
            call.message.chat.id,
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 2 –∏–∑ 3\n\n–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
            reply_markup=create_interests_keyboard(),
        )
    else:
        bot.send_message(
            call.message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


def create_interests_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    chat_button = types.InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data="interest_chat")
    intimate_button = types.InlineKeyboardButton(
        "–î—Ä—É–≥–æ–µ", callback_data="interest_other"
    )
    keyboard.add(chat_button, intimate_button)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith("interest_"))
def handle_interest_selection(call):
    user_id = call.from_user.id
    interest = call.data.split("_")[1]
    # Save interest to the database
    if (
        user_exists(user_id)
        and get_user_gender(user_id) is not None
        and get_user_interest(user_id) is None
    ):
        save_user_interest(user_id, interest)
        bot.delete_message(
            call.message.chat.id, call.message.message_id
        )  # Delete the message after button press
        bot.send_message(
            call.message.chat.id,
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 3 –∏–∑ 3\n\n–ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–æ—Ç 10 –¥–æ 99)",
        )
    else:
        bot.send_message(
            call.message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=create_main_keyboard(),
        )


@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_age(message):
    user_id = message.from_user.id
    age = int(message.text)

    if user_exists(user_id) and get_user_gender(user_id) is not None:
        if get_user_age(user_id) is None:
            markup = create_main_keyboard()
            save_user_age(user_id, age)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(
                message.chat.id,
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.",
                reply_markup=markup,
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=create_main_keyboard(),
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    profile_button = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    find_partner_button = types.KeyboardButton("–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé")
    keyboard.add(profile_button, find_partner_button)
    return keyboard


@bot.message_handler(commands=["menu"])
def show_menu(message):
    markup = create_main_keyboard()
    bot.send_message(message.chat.id, "‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def handle_profile(message):
    user_id = message.from_user.id
    if not user_subscribed_channel(user_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        subscribe_button = types.InlineKeyboardButton(
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/chatroulletebotuz"
        )
        continue_button = types.InlineKeyboardButton(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_registration"
        )
        markup.add(subscribe_button, continue_button)
        bot.send_message(
            message.chat.id,
            'üòî –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
            reply_markup=markup,
        )
        return
    else:
        profile_data = get_user_profile(user_id)
        if profile_data:
            # Fetch reactions data
            reactions_data = get_user_reactions(user_id)

            # Create profile text
            profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n#Ô∏è‚É£ ID ‚Äî {user_id}\nüë´ –ü–æ–ª ‚Äî {profile_data['gender']}\nüîû –í–æ–∑—Ä–∞—Å—Ç ‚Äî {profile_data['age']}\nüö™ –ö–æ–º–Ω–∞—Ç–∞ - {profile_data['interest']}"

            # Add reactions data to profile text
            if reactions_data:
                profile_text += "\n\nüëç {}  üëé {}  ‚ô•Ô∏è {}  üî• {}  üëå {}  üö´ {}".format(
                    reactions_data.get("üëç", 0),
                    reactions_data.get("üëé", 0),
                    reactions_data.get("‚ô•Ô∏è", 0),
                    reactions_data.get("üî•", 0),
                    reactions_data.get("üëå", 0),
                    reactions_data.get("üö´", 0),
                )
            else:
                profile_text += "\n\n üëç 0 üëé 0  ‚ô•Ô∏è  0 üî• 0 üëå 0 üö´ 0"

            bot.send_message(
                message.chat.id, profile_text, reply_markup=create_profile_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
            )


@bot.message_handler(commands=["profile"])
def profile(message):
    handle_profile(message)


def create_profile_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    change_age_button = types.InlineKeyboardButton(
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="change_age"
    )
    keyboard.add(change_age_button)
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data.startswith("change_"))
def handle_change_profile(call):
    user_id = call.from_user.id
    action = call.data.split("_")[1]
    if user_exists(user_id):

        if action == "age":
            bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            bot.register_next_step_handler(call.message, process_new_age)
    else:
        bot.send_message(
            call.message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


def process_new_age(message):
    user_id = message.from_user.id
    try:
        new_age = int(message.text)
        # Update the age in the database
        update_user_age(user_id, new_age)
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.",
            reply_markup=create_main_keyboard(),
        )
    except ValueError:
        bot.send_message(
            message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )


left_user_id = None


def get_active_chat_active(chat_id):
    """
    Get the user IDs of both users in the active chat for the provided chat ID.

    Args:
    - chat_id (int): The chat ID for which to retrieve the active chat.

    Returns:
    - tuple or None: A tuple containing user IDs of both users in the active chat, or None if no active chat is found.
    """
    for user_id, active_chat_id in active_chats.items():
        if active_chat_id == chat_id:
            # Return user IDs of both users involved in the active chat
            return (user_id, active_chats[user_id])
    return None


def delete_chat_active(chat_id):
    """
    Delete the active chat associated with the given chat ID from the active_chats dictionary.

    Args:
    - chat_id (int): The chat ID to be deleted.

    Returns:
    - bool: True if the active chat was successfully deleted, False otherwise.
    """
    for user_id, active_chat_id in active_chats.items():
        if active_chat_id == chat_id:
            # Remove both entries (user ID to chat ID and chat ID to user ID)
            del active_chats[user_id]
            del active_chats[chat_id]
            return True
    return False


left_user_id = None
stop_requests = []


@bot.message_handler(commands=["stop"])
def stop(message):
    global left_user_id

    user_id = message.chat.id
    chat_info = get_active_chat_active(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    item2 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé")
    markup.add(item1, item2)

    if user_exists(user_id):
        if not user_subscribed_channel(user_id):
            markup = types.InlineKeyboardMarkup(row_width=1)
            subscribe_button = types.InlineKeyboardButton(
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/chatroulletebotuz"
            )
            continue_button = types.InlineKeyboardButton(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_registration"
            )
            markup.add(subscribe_button, continue_button)
            bot.send_message(
                message.chat.id,
                'üòî –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
                reply_markup=markup,
            )
            return
        else:
            # Store the user ID who pressed /stop first
            stop_requests.append(user_id)

            if chat_info:
                if left_user_id is None:
                    left_user_id = user_id
                    bot.send_message(
                        user_id, "‚úã –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç —á–∞—Ç."
                    )
                else:
                    delete_chat_active(chat_info[0])
                    bot.send_message(
                        chat_info[0], "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", reply_markup=markup
                    )
                    bot.send_message(
                        user_id, "‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞", reply_markup=markup
                    )
                    reaction_markup = types.InlineKeyboardMarkup(row_width=3)
                    item1 = types.InlineKeyboardButton(
                        "üëç", callback_data="reaction_üëç"
                    )
                    item2 = types.InlineKeyboardButton(
                        "üëé", callback_data="reaction_üëé"
                    )
                    item3 = types.InlineKeyboardButton("‚ô•Ô∏è", callback_data="reaction_‚ô•Ô∏è")
                    item4 = types.InlineKeyboardButton(
                        "üî•", callback_data="reaction_üî•"
                    )
                    item5 = types.InlineKeyboardButton(
                        "üëå", callback_data="reaction_üëå"
                    )
                    item6 = types.InlineKeyboardButton(
                        "üö´", callback_data="reaction_üö´"
                    )
                    reaction_markup.add(item1, item2, item3, item4, item5, item6)
                    bot.send_message(
                        chat_info[0],
                        "üñãÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å–º–∞–π–ª–∞–º–∏ ‚ú®:",
                        reply_markup=reaction_markup,
                    )
            else:
                bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —á–∞—Ç", reply_markup=markup)
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


saved_reactions = {}


@bot.callback_query_handler(func=lambda call: call.data.startswith("reaction_"))
def handle_reaction(call):
    global left_user_id
    global saved_reactions

    reaction = call.data.split("_")[1]  # Extract the reaction from the callback data

    if left_user_id is None:
        # Handle the case where left_user_id is not set (unexpected behavior)
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —á–∞—Ç")
        return

    if left_user_id in saved_reactions:
        # If the user has already saved a reaction
        bot.answer_callback_query(call.id, "‚úÖ –í—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é")
    else:
        # Save the reaction into the database associated with the user who left
        save_reaction(left_user_id, reaction)
        saved_reactions[left_user_id] = (
            reaction  # Mark the reaction as saved for this user
        )

        # Send a message confirming the reaction
        bot.send_message(call.message.chat.id, "‚úÖ –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

        # Delete the reaction keyboard
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id, message_id=call.message.message_id
        )

        # Optionally, you can create and send the main keyboard here
        create_main_keyboard()  # Assuming this function creates and sends the main keyboard

        # Clear saved reaction after sending the menu
        saved_reactions.pop(left_user_id, None)


@bot.message_handler(content_types=["text"])
def bot_message(message):
    user_id = message.from_user.id
    if user_exists(user_id):
        if not user_subscribed_channel(user_id):
            markup = types.InlineKeyboardMarkup(
                row_width=1
            )  # Set row_width to 1 for a vertical layout
            subscribe_button = types.InlineKeyboardButton(
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/chatroulletebotuz"
            )
            continue_button = types.InlineKeyboardButton(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_registration"
            )
            markup.add(subscribe_button, continue_button)
            bot.send_message(
                message.chat.id,
                'üòî –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
                reply_markup=markup,
            )
            return
        else:
            if message.chat.type == "private":
                if message.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé":
                    handle_find_partner(message)
                elif message.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
                    handle_stop_search(message)
                else:
                    handle_chat_message(message)
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


active_chats = {}
searching_users = []


@bot.message_handler(func=lambda message: message.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé")
def handle_find_partner(message):
    user_id = message.from_user.id
    if user_exists(user_id):
        if not user_subscribed_channel(user_id):
            markup = types.InlineKeyboardMarkup(row_width=1)
            subscribe_button = types.InlineKeyboardButton(
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/chatroulletebotuz"
            )
            continue_button = types.InlineKeyboardButton(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_registration"
            )
            markup.add(subscribe_button, continue_button)
            bot.send_message(
                message.chat.id,
                'üòî –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
                reply_markup=markup,
            )
            return
        else:
            global searching_users
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")
            markup.add(item1)
            searching_users.append(user_id)

            if len(searching_users) >= 2:
                chat_two = searching_users.pop(0)
                chat_one = searching_users.pop(0)

                # Ensure users don't chat with themselves
                if chat_one != chat_two:
                    # Fetch reactions data for both users
                    chat_one_reactions = get_user_reactions(chat_one)
                    chat_two_reactions = get_user_reactions(chat_two)

                    # Create a new chat
                    active_chats[chat_one] = chat_two
                    active_chats[chat_two] = chat_one

                    thumbs_up = chat_two_reactions.get('üëç', 0)
                    thumbs_down = chat_two_reactions.get('üëé', 0)
                    fire = chat_two_reactions.get('üî•', 0)
                    heart = chat_two_reactions.get('‚ô•Ô∏è',0)
                    good = chat_two_reactions.get('üëå',0)
                    spam = chat_two_reactions.get('üö´',0)

                    thumbs_up_2 = chat_one_reactions.get('üëç', 0)
                    thumbs_down_2 = chat_one_reactions.get('üëé', 0)
                    fire_2 = chat_one_reactions.get('üî•', 0)
                    heart_2 = chat_one_reactions.get('‚ô•Ô∏è',0)
                    good_2 = chat_one_reactions.get('üëå',0)
                    spam_2 = chat_one_reactions.get('üö´',0)

                    mess_chat_one = f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /stop\n\n üëç {thumbs_up}  üëé {thumbs_down}  üî• {fire}  ‚ô•Ô∏è {heart}  üëå {good}  üö´ {spam}"
                    markup_chat_one = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1_chat_one = types.KeyboardButton("/stop")
                    markup_chat_one.add(item1_chat_one)
                    bot.send_message(chat_one, mess_chat_one, reply_markup=markup_chat_one)

                    mess_chat_two = f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /stop \n\n üëç {thumbs_up_2}  üëé {thumbs_down_2}  üî• {fire_2}  ‚ô•Ô∏è {heart_2}  üëå {good_2}  üö´ {spam_2}"
                    markup_chat_two = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1_chat_two = types.KeyboardButton("/stop")
                    markup_chat_two.add(item1_chat_two)
                    bot.send_message(chat_two, mess_chat_two, reply_markup=markup_chat_two)
                else:
                    searching_users.append(chat_one)  # Put the user back in the queue
                    bot.send_message(
                        chat_one,
                        "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å–∞–º–∏ —Å —Å–æ–±–æ–π. –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                        reply_markup=markup,
                    )
            else:
                bot.send_message(
                    message.chat.id, "–û–∂–∏–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup
                )
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é./start",
        )


def handle_stop_search(message):
    global searching_users
    if message.from_user.id in searching_users:
        searching_users.remove(message.from_user.id)
    bot.send_message(
        message.chat.id, "‚ùå –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=create_main_keyboard()
    )


def handle_chat_message(message):
    user_id = message.from_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        try:
            # Attempt to send the message to the partner
            bot.send_message(partner_id, message.text)
        except Exception as e:
            logging.error(f"Error sending message to user {partner_id}: {e}")
            bot.send_message(
                user_id,
                "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            )
    else:
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=create_main_keyboard(),
        )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("continue_registration")
)
def after_subscribing(call):
    user_id = call.message.chat.id
    if user_subscribed_channel(user_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        item2 = types.KeyboardButton("–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé")
        markup.add(item1, item2)
        bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=markup)
    else:
        # User did not follow and press continue registration
        bot.send_message(
            user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        )


print("==========================================")
print("                                         ")
print("Telegram bot is working without any errors")
print("                                         ")
print("==========================================")


if __name__ == "__main__":
    logging.info("Bot is starting.")
    bot.polling()
